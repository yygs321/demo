# 실행할 단계(Stage)들을 정의합니다.
stages:
  - build_jar
  - docker_build
  - deploy

# JAR 파일을 빌드하는 작업
jar_build:
  stage: build_jar
  image: gradle:8.14-jdk17
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: always
    - if: '$CI_COMMIT_BRANCH == "dev"'
      when: always
    - when: manual
  variables:
    GRADLE_USER_HOME: "$CI_PROJECT_DIR/.gradle"
  cache:
    key: "$CI_COMMIT_REF_SLUG"
    paths:
      - .gradle/
  before_script:
    - echo "📌 [jar_build 단계 시작] ====================================="
    - chmod +x ./gradlew
  script:
    - echo "📦 Gradle 빌드 시작..."
    - ./gradlew clean build -x test

    - echo "✅ Gradle 빌드 완료"
  artifacts:
    paths:
      - 'demo-boot/build/libs/*.jar'
    expire_in: 1 days

docker_build:
  stage: docker_build
  needs: [ "jar_build" ] # jar생성 job이 완료된 후에만 작동
  image: docker:latest
  before_script:
    - echo "📌 [docker_build 단계 시작] ===================================="
    - sleep 20
    - ls -alhF demo-boot/build/libs/
  script:
    - echo "🔐 Docker 레지스트리 로그인 시작..."
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_ID" --password-stdin "$CI_REGISTRY"
    - echo "🐳 Docker 이미지 빌드 시작..."
    # CI/CD 설정에 등록된 DOCKER_IMAGE_NAME 변수를 사용하도록 수정
    - docker build -t "${CI_REGISTRY}/${DOCKER_REPOSITORY}/${DOCKER_IMAGE_NAME}:${CI_PIPELINE_ID}" .
    - echo "🏷️ Docker 이미지 태깅..."
    - docker tag "${CI_REGISTRY}/${DOCKER_REPOSITORY}/${DOCKER_IMAGE_NAME}:${CI_PIPELINE_ID}" "${CI_REGISTRY}/${DOCKER_REPOSITORY}/${DOCKER_IMAGE_NAME}:latest"
    - echo "🚀 Docker 이미지 푸시 (버전 태그)..."
    - docker push "${CI_REGISTRY}/${DOCKER_REPOSITORY}/${DOCKER_IMAGE_NAME}:${CI_PIPELINE_ID}"
    - echo "🚀 Docker 이미지 푸시 (latest 태그)..."
    - docker push "${CI_REGISTRY}/${DOCKER_REPOSITORY}/${DOCKER_IMAGE_NAME}:latest"
    - echo "✅ 모든 Docker 작업 완료"

deploy:
  stage: deploy
  needs: ["docker_build"]
  image: alpine:latest
  before_script:
    - echo "📌 [deploy 단계 시작] ===================================="
    - apk add --no-cache openssh-client                   # SSH 명령어 설치
    - eval $(ssh-agent -s)                               # ssh-agent 시작
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -   # 환경변수 개인키 추가
  script:
    - echo "🔐 사내 서버 접속 및 Docker 배포 준비..."
    - ssh -p "$DEPLOY_SSH_PORT" -o StrictHostKeyChecking=no "$DEPLOY_USER@$DEPLOY_SERVER_IP" "
      echo '🔐 Docker 레지스트리 로그인 시작...';
      echo '$CI_REGISTRY_PASSWORD' | docker login -u '$CI_REGISTRY_ID' --password-stdin '$CI_REGISTRY';
      echo '🐳 Docker 이미지 pull 시작...';
      docker pull '${CI_REGISTRY}/${DOCKER_REPOSITORY}/${DOCKER_IMAGE_NAME}:${CI_PIPELINE_ID}';
      echo '⏹️ 기존 컨테이너 중지 및 삭제...';
      docker stop demo-app || true;
      docker rm demo-app || true;
      echo '🚀 새 컨테이너 실행...';
      docker run -d --name demo-app -p '$DEPLOY_APP_PORT:8080' '${CI_REGISTRY}/${DOCKER_REPOSITORY}/${DOCKER_IMAGE_NAME}:${CI_PIPELINE_ID}';
      echo '✅ 배포 완료';
      "

