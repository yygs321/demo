# build.gradle에 명시된 대로 JDK 17이 포함된 Gradle 이미지를 사용
image: gradle:8.5-jdk17

stages:
  - build_jar
#  - build_image
#  - deploy

# 빌드 작업: 코드를 컴파일하고 JAR 파일을 생성
build_jar_job:
  stage: build_jar
  image: gradle:8.13-jdk17
  variables:
    GRADLE_USER_HOME: "$CI_PROJECT_DIR/.gradle"
  cache:
    paths:
      - .gradle/
  before_script:
    - set -euxo pipefail # 디버깅을 위한 쉘 옵션 (명령어 출력, 에러 시 즉시 종료)
    - chmod +x ./gradlew #파일에 실행 권한 부여
    - echo "--- 현재 디렉토리 구조 ---"
    - ls -alR .
  script:
    - echo "--- Gradle 빌드 시작 ---" # Gradle 빌드 시작
    - ./gradlew build -x test --info # --info 옵션으로 더 자세한 로그 출력
    - echo "--- Gradle 빌드 완료 ---" # Gradle 빌드 완료
  artifacts:
    paths:
      - 'demo-boot/build/libs/*.jar'
    expire_in: 1 week

#build_image_job:
#  stage: build_image
#  needs: ["build_jar_job"] #jar생성이 완료된 후에만 작동
#  before_script:
#    - sed -i "s/PROJECT_NAME/$CI_PROJECT_NAME/g" Dockerfile
#    - pwd
#    - ls -alhF
#    - ls -alhF demo-boot/build/libs/
#  script:
#    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_ID" --password-stdin "$CI_REGISTRY"
#    - docker build -t "${CI_REGISTRY}/${DOCKER_REPOSITORY}/${DOCKER_IMAGE_NAME}:${CI_PIPELINE_ID}" .
#    - docker tag "${CI_REGISTRY}/${DOCKER_REPOSITORY}/${DOCKER_IMAGE_NAME}:${CI_PIPELINE_ID}" "${CI_REGISTRY}/${DOCKER_REPOSITORY}/${DOCKER_IMAGE_NAME}:latest"
#    - docker push "${CI_REGISTRY}/${DOCKER_REPOSITORY}/${DOCKER_IMAGE_NAME}:${CI_PIPELINE_ID}"
#    - docker push "${CI_REGISTRY}/${DOCKER_REPOSITORY}/${DOCKER_IMAGE_NAME}:latest"